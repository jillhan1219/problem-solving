任务描述
实现一个针对二维坐标系中的坐标点集合的处理程序，支持在该点集中添加点、查找点、筛选点集、排序与输出。

相关知识
STL算法库，详情可以参考https://blog.csdn.net/u014183456/article/details/82835281。

编程要求
实践中需要使用STL容器存储一个二维坐标点的集合（点的横纵坐标均为整数），并支持如下操作：
（1）add n x1 y1 x2 y2 ... xn yn：在集合中添加n个坐标点，坐标分别为(x1, y1)、...、(xn, yn)，并对当前集合进行去重，输出去重后点的数量。
（2）find x0 y0：查找集合中是否存在点(x0, y0)，如果有则输出find，否则输出not find。
（3）filter x0 y0 d：对集合进行筛选，保留所有与点(x0, y0)的距离小于等于d的点，输出筛选后点的数量。
（4）sort x0 y0：对集合优先按照点到点(x0, y0)的距离升序排序，若距离相同则按x坐标升序排序，并输出排序结果。输出格式为(x1, y1), (x2, y2), ...，注意逗号后的空格。

main函数中，用户提供输入、输出如下：
    程序的输入为多行指令，不超过20行，指令格式如上所述。
    程序的输出的行数与输入指令行数相同，每一行指令的输出格式如上所述。如果输入指令不符合格式，则该行输出invalid input，并跳过该指令。

注意：
  （1）本次作业尽量使用STL算法库提供的算法，比如find、unique、partition、sort等。
  （2）在使用STL算法函数时通过传入自定义的比较操作来减少代码复杂度。

测试说明
测试输入：
add 3 1 1 2 2 3 3
find 1 1
filter 1 1 2
sort 3 3
预期输出：
3
find
2
(2, 2), (1, 1)

add 7 13 1 23 24 31 13 13 1 88 9 9 88 32 33
find 13 13
add 1 13 13
find 13 13
find 13 1

6
not find
7
find
find

add 8 4 5 3 2 5 9 7 10 7 10 2 90 1 -1 -3 -3
sort 0
filter 0 10
add 1 3 3
find 3 3

7
invalid input
invalid input
8
find

add 7 13 1 23 24 31 13 13 1 88 9 9 88 32 33
filter 1 1 100
filter 1 1 50
sort 1 1

6
6
4
(13, 1), (23, 24), (31, 13), (32, 33)

add 3 3 3 3 3
sort 0 1
filter 0 1 10
add 1 3 3
find 3 3

invalid input

0
1
find

add 8 4 5 3 2 5 9 7 10 7 10 2 90 1 -1 -3 -3
sorted 0 1
found 11 13

7
invalid input
invalid input